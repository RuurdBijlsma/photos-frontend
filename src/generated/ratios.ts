// Code generated by protoc-gen-ts_proto. DO NOT EDIT.
// versions:
//   protoc-gen-ts_proto  v2.8.1
//   protoc               v6.33.0
// source: ratios.proto

/* eslint-disable */
import { BinaryReader, BinaryWriter } from "@bufbuild/protobuf/wire";

export const protobufPackage = "api";

/** Contains ratios and amount of media items per month, grouped by month. */
export interface TimelineResponse {
  months: MonthTimeline[];
}

export interface MonthTimeline {
  monthId: string;
  count: number;
  ratios: number[];
}

/** Contains detailed information for media items for the requested months, grouped by month. */
export interface PhotosByMonthResponse {
  months: MonthMedia[];
}

export interface MonthMedia {
  monthId: string;
  items: MediaItem[];
}

export interface MediaItem {
  id: string;
  isVideo: boolean;
  isPanorama: boolean;
  durationMs?: number | undefined;
  timestamp: string;
}

function createBaseTimelineResponse(): TimelineResponse {
  return { months: [] };
}

export const TimelineResponse: MessageFns<TimelineResponse> = {
  encode(message: TimelineResponse, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    for (const v of message.months) {
      MonthTimeline.encode(v!, writer.uint32(10).fork()).join();
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): TimelineResponse {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    const end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseTimelineResponse();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.months.push(MonthTimeline.decode(reader, reader.uint32()));
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): TimelineResponse {
    return {
      months: globalThis.Array.isArray(object?.months) ? object.months.map((e: any) => MonthTimeline.fromJSON(e)) : [],
    };
  },

  toJSON(message: TimelineResponse): unknown {
    const obj: any = {};
    if (message.months?.length) {
      obj.months = message.months.map((e) => MonthTimeline.toJSON(e));
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<TimelineResponse>, I>>(base?: I): TimelineResponse {
    return TimelineResponse.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<TimelineResponse>, I>>(object: I): TimelineResponse {
    const message = createBaseTimelineResponse();
    message.months = object.months?.map((e) => MonthTimeline.fromPartial(e)) || [];
    return message;
  },
};

function createBaseMonthTimeline(): MonthTimeline {
  return { monthId: "", count: 0, ratios: [] };
}

export const MonthTimeline: MessageFns<MonthTimeline> = {
  encode(message: MonthTimeline, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.monthId !== "") {
      writer.uint32(10).string(message.monthId);
    }
    if (message.count !== 0) {
      writer.uint32(16).int32(message.count);
    }
    writer.uint32(26).fork();
    for (const v of message.ratios) {
      writer.float(v);
    }
    writer.join();
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): MonthTimeline {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    const end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseMonthTimeline();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.monthId = reader.string();
          continue;
        }
        case 2: {
          if (tag !== 16) {
            break;
          }

          message.count = reader.int32();
          continue;
        }
        case 3: {
          if (tag === 29) {
            message.ratios.push(reader.float());

            continue;
          }

          if (tag === 26) {
            const end2 = reader.uint32() + reader.pos;
            while (reader.pos < end2) {
              message.ratios.push(reader.float());
            }

            continue;
          }

          break;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): MonthTimeline {
    return {
      monthId: isSet(object.monthId) ? globalThis.String(object.monthId) : "",
      count: isSet(object.count) ? globalThis.Number(object.count) : 0,
      ratios: globalThis.Array.isArray(object?.ratios) ? object.ratios.map((e: any) => globalThis.Number(e)) : [],
    };
  },

  toJSON(message: MonthTimeline): unknown {
    const obj: any = {};
    if (message.monthId !== "") {
      obj.monthId = message.monthId;
    }
    if (message.count !== 0) {
      obj.count = Math.round(message.count);
    }
    if (message.ratios?.length) {
      obj.ratios = message.ratios;
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<MonthTimeline>, I>>(base?: I): MonthTimeline {
    return MonthTimeline.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<MonthTimeline>, I>>(object: I): MonthTimeline {
    const message = createBaseMonthTimeline();
    message.monthId = object.monthId ?? "";
    message.count = object.count ?? 0;
    message.ratios = object.ratios?.map((e) => e) || [];
    return message;
  },
};

function createBasePhotosByMonthResponse(): PhotosByMonthResponse {
  return { months: [] };
}

export const PhotosByMonthResponse: MessageFns<PhotosByMonthResponse> = {
  encode(message: PhotosByMonthResponse, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    for (const v of message.months) {
      MonthMedia.encode(v!, writer.uint32(10).fork()).join();
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): PhotosByMonthResponse {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    const end = length === undefined ? reader.len : reader.pos + length;
    const message = createBasePhotosByMonthResponse();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.months.push(MonthMedia.decode(reader, reader.uint32()));
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): PhotosByMonthResponse {
    return {
      months: globalThis.Array.isArray(object?.months) ? object.months.map((e: any) => MonthMedia.fromJSON(e)) : [],
    };
  },

  toJSON(message: PhotosByMonthResponse): unknown {
    const obj: any = {};
    if (message.months?.length) {
      obj.months = message.months.map((e) => MonthMedia.toJSON(e));
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<PhotosByMonthResponse>, I>>(base?: I): PhotosByMonthResponse {
    return PhotosByMonthResponse.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<PhotosByMonthResponse>, I>>(object: I): PhotosByMonthResponse {
    const message = createBasePhotosByMonthResponse();
    message.months = object.months?.map((e) => MonthMedia.fromPartial(e)) || [];
    return message;
  },
};

function createBaseMonthMedia(): MonthMedia {
  return { monthId: "", items: [] };
}

export const MonthMedia: MessageFns<MonthMedia> = {
  encode(message: MonthMedia, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.monthId !== "") {
      writer.uint32(10).string(message.monthId);
    }
    for (const v of message.items) {
      MediaItem.encode(v!, writer.uint32(18).fork()).join();
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): MonthMedia {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    const end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseMonthMedia();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.monthId = reader.string();
          continue;
        }
        case 2: {
          if (tag !== 18) {
            break;
          }

          message.items.push(MediaItem.decode(reader, reader.uint32()));
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): MonthMedia {
    return {
      monthId: isSet(object.monthId) ? globalThis.String(object.monthId) : "",
      items: globalThis.Array.isArray(object?.items) ? object.items.map((e: any) => MediaItem.fromJSON(e)) : [],
    };
  },

  toJSON(message: MonthMedia): unknown {
    const obj: any = {};
    if (message.monthId !== "") {
      obj.monthId = message.monthId;
    }
    if (message.items?.length) {
      obj.items = message.items.map((e) => MediaItem.toJSON(e));
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<MonthMedia>, I>>(base?: I): MonthMedia {
    return MonthMedia.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<MonthMedia>, I>>(object: I): MonthMedia {
    const message = createBaseMonthMedia();
    message.monthId = object.monthId ?? "";
    message.items = object.items?.map((e) => MediaItem.fromPartial(e)) || [];
    return message;
  },
};

function createBaseMediaItem(): MediaItem {
  return { id: "", isVideo: false, isPanorama: false, durationMs: undefined, timestamp: "" };
}

export const MediaItem: MessageFns<MediaItem> = {
  encode(message: MediaItem, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.id !== "") {
      writer.uint32(10).string(message.id);
    }
    if (message.isVideo !== false) {
      writer.uint32(16).bool(message.isVideo);
    }
    if (message.isPanorama !== false) {
      writer.uint32(24).bool(message.isPanorama);
    }
    if (message.durationMs !== undefined) {
      writer.uint32(32).int32(message.durationMs);
    }
    if (message.timestamp !== "") {
      writer.uint32(42).string(message.timestamp);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): MediaItem {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    const end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseMediaItem();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.id = reader.string();
          continue;
        }
        case 2: {
          if (tag !== 16) {
            break;
          }

          message.isVideo = reader.bool();
          continue;
        }
        case 3: {
          if (tag !== 24) {
            break;
          }

          message.isPanorama = reader.bool();
          continue;
        }
        case 4: {
          if (tag !== 32) {
            break;
          }

          message.durationMs = reader.int32();
          continue;
        }
        case 5: {
          if (tag !== 42) {
            break;
          }

          message.timestamp = reader.string();
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): MediaItem {
    return {
      id: isSet(object.id) ? globalThis.String(object.id) : "",
      isVideo: isSet(object.isVideo) ? globalThis.Boolean(object.isVideo) : false,
      isPanorama: isSet(object.isPanorama) ? globalThis.Boolean(object.isPanorama) : false,
      durationMs: isSet(object.durationMs) ? globalThis.Number(object.durationMs) : undefined,
      timestamp: isSet(object.timestamp) ? globalThis.String(object.timestamp) : "",
    };
  },

  toJSON(message: MediaItem): unknown {
    const obj: any = {};
    if (message.id !== "") {
      obj.id = message.id;
    }
    if (message.isVideo !== false) {
      obj.isVideo = message.isVideo;
    }
    if (message.isPanorama !== false) {
      obj.isPanorama = message.isPanorama;
    }
    if (message.durationMs !== undefined) {
      obj.durationMs = Math.round(message.durationMs);
    }
    if (message.timestamp !== "") {
      obj.timestamp = message.timestamp;
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<MediaItem>, I>>(base?: I): MediaItem {
    return MediaItem.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<MediaItem>, I>>(object: I): MediaItem {
    const message = createBaseMediaItem();
    message.id = object.id ?? "";
    message.isVideo = object.isVideo ?? false;
    message.isPanorama = object.isPanorama ?? false;
    message.durationMs = object.durationMs ?? undefined;
    message.timestamp = object.timestamp ?? "";
    return message;
  },
};

type Builtin = Date | Function | Uint8Array | string | number | boolean | undefined;

export type DeepPartial<T> = T extends Builtin ? T
  : T extends globalThis.Array<infer U> ? globalThis.Array<DeepPartial<U>>
  : T extends ReadonlyArray<infer U> ? ReadonlyArray<DeepPartial<U>>
  : T extends {} ? { [K in keyof T]?: DeepPartial<T[K]> }
  : Partial<T>;

type KeysOfUnion<T> = T extends T ? keyof T : never;
export type Exact<P, I extends P> = P extends Builtin ? P
  : P & { [K in keyof P]: Exact<P[K], I[K]> } & { [K in Exclude<keyof I, KeysOfUnion<P>>]: never };

function isSet(value: any): boolean {
  return value !== null && value !== undefined;
}

export interface MessageFns<T> {
  encode(message: T, writer?: BinaryWriter): BinaryWriter;
  decode(input: BinaryReader | Uint8Array, length?: number): T;
  fromJSON(object: any): T;
  toJSON(message: T): unknown;
  create<I extends Exact<DeepPartial<T>, I>>(base?: I): T;
  fromPartial<I extends Exact<DeepPartial<T>, I>>(object: I): T;
}
