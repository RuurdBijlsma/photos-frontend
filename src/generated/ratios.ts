// Code generated by protoc-gen-ts_proto. DO NOT EDIT.
// versions:
//   protoc-gen-ts_proto  v2.8.1
//   protoc               v6.33.0
// source: ratios.proto

/* eslint-disable */
import { BinaryReader, BinaryWriter } from "@bufbuild/protobuf/wire";

export const protobufPackage = "api";

/**
 * Contains a list of ratios for a single month.
 * This corresponds to the inner Vec<f32>.
 */
export interface MonthlyPhotoRatios {
  /** `repeated` indicates a list/array. The `= 1` is the field number. */
  ratios: number[];
}

/**
 * The top-level response message.
 * This corresponds to the outer Vec<...>.
 */
export interface AllPhotoRatiosResponse {
  months: MonthlyPhotoRatios[];
}

function createBaseMonthlyPhotoRatios(): MonthlyPhotoRatios {
  return { ratios: [] };
}

export const MonthlyPhotoRatios: MessageFns<MonthlyPhotoRatios> = {
  encode(message: MonthlyPhotoRatios, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    writer.uint32(10).fork();
    for (const v of message.ratios) {
      writer.float(v);
    }
    writer.join();
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): MonthlyPhotoRatios {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    const end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseMonthlyPhotoRatios();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag === 13) {
            message.ratios.push(reader.float());

            continue;
          }

          if (tag === 10) {
            const end2 = reader.uint32() + reader.pos;
            while (reader.pos < end2) {
              message.ratios.push(reader.float());
            }

            continue;
          }

          break;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): MonthlyPhotoRatios {
    return {
      ratios: globalThis.Array.isArray(object?.ratios) ? object.ratios.map((e: any) => globalThis.Number(e)) : [],
    };
  },

  toJSON(message: MonthlyPhotoRatios): unknown {
    const obj: any = {};
    if (message.ratios?.length) {
      obj.ratios = message.ratios;
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<MonthlyPhotoRatios>, I>>(base?: I): MonthlyPhotoRatios {
    return MonthlyPhotoRatios.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<MonthlyPhotoRatios>, I>>(object: I): MonthlyPhotoRatios {
    const message = createBaseMonthlyPhotoRatios();
    message.ratios = object.ratios?.map((e) => e) || [];
    return message;
  },
};

function createBaseAllPhotoRatiosResponse(): AllPhotoRatiosResponse {
  return { months: [] };
}

export const AllPhotoRatiosResponse: MessageFns<AllPhotoRatiosResponse> = {
  encode(message: AllPhotoRatiosResponse, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    for (const v of message.months) {
      MonthlyPhotoRatios.encode(v!, writer.uint32(10).fork()).join();
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): AllPhotoRatiosResponse {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    const end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseAllPhotoRatiosResponse();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.months.push(MonthlyPhotoRatios.decode(reader, reader.uint32()));
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): AllPhotoRatiosResponse {
    return {
      months: globalThis.Array.isArray(object?.months)
        ? object.months.map((e: any) => MonthlyPhotoRatios.fromJSON(e))
        : [],
    };
  },

  toJSON(message: AllPhotoRatiosResponse): unknown {
    const obj: any = {};
    if (message.months?.length) {
      obj.months = message.months.map((e) => MonthlyPhotoRatios.toJSON(e));
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<AllPhotoRatiosResponse>, I>>(base?: I): AllPhotoRatiosResponse {
    return AllPhotoRatiosResponse.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<AllPhotoRatiosResponse>, I>>(object: I): AllPhotoRatiosResponse {
    const message = createBaseAllPhotoRatiosResponse();
    message.months = object.months?.map((e) => MonthlyPhotoRatios.fromPartial(e)) || [];
    return message;
  },
};

type Builtin = Date | Function | Uint8Array | string | number | boolean | undefined;

export type DeepPartial<T> = T extends Builtin ? T
  : T extends globalThis.Array<infer U> ? globalThis.Array<DeepPartial<U>>
  : T extends ReadonlyArray<infer U> ? ReadonlyArray<DeepPartial<U>>
  : T extends {} ? { [K in keyof T]?: DeepPartial<T[K]> }
  : Partial<T>;

type KeysOfUnion<T> = T extends T ? keyof T : never;
export type Exact<P, I extends P> = P extends Builtin ? P
  : P & { [K in keyof P]: Exact<P[K], I[K]> } & { [K in Exclude<keyof I, KeysOfUnion<P>>]: never };

export interface MessageFns<T> {
  encode(message: T, writer?: BinaryWriter): BinaryWriter;
  decode(input: BinaryReader | Uint8Array, length?: number): T;
  fromJSON(object: any): T;
  toJSON(message: T): unknown;
  create<I extends Exact<DeepPartial<T>, I>>(base?: I): T;
  fromPartial<I extends Exact<DeepPartial<T>, I>>(object: I): T;
}
